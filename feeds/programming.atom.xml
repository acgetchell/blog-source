<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adam's Entropy</title><link href="http://adamgetchell.org/" rel="alternate"></link><link href="http://adamgetchell.org/feeds/programming.atom.xml" rel="self"></link><id>http://adamgetchell.org/</id><updated>2011-12-01T23:32:00-08:00</updated><entry><title>Lisp Conversion</title><link href="http://adamgetchell.org/lisp-conversion.html" rel="alternate"></link><updated>2011-12-01T23:32:00-08:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2011-12-01:lisp-conversion.html</id><summary type="html">&lt;p&gt;A few months and a lot of Lisp later, I find myself convinced/converted&amp;nbsp;&amp;#8230;  &lt;/p&gt;
&lt;p&gt;&amp;#8230; To &lt;a href="http://clojure.org/"&gt;Clojure&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Rajesh, you were&amp;nbsp;right!  &lt;/p&gt;
&lt;p&gt;As far as language ~~snobbery~~ coolness, it has a bunch of features I
like such&amp;nbsp;as:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="http://clojure.org/dynamic"&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt; for fast&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clojure.org/functional_programming"&gt;Functional programming&lt;/a&gt;
    with &lt;a href="http://thinkrelevance.com/blog/2008/09/16/pcl-clojure-chapter-6.html"&gt;immutable
    values&lt;/a&gt; which
    makes it easy to reason about&amp;nbsp;concurrency&lt;/li&gt;
&lt;li&gt;&lt;a href="http://clojure.org/concurrent_programming"&gt;Concurrent programming&lt;/a&gt;
    via &lt;a href="http://clojure.org/refs"&gt;software transactional&amp;nbsp;memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A
    &lt;a href="http://hornbeck.wordpress.com/2009/07/05/lisp-1-vs-lisp-2/"&gt;Lisp-1&lt;/a&gt;
    &lt;a href="http://clojure.org/lisp"&gt;dialect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;OOP&lt;/span&gt; benefits without &lt;span class="caps"&gt;OOP&lt;/span&gt; using &lt;a href="http://clojure.org/runtime_polymorphism"&gt;runtime&amp;nbsp;polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lots of modern libraries by being &lt;a href="http://clojure.org/jvm_hosted"&gt;hosted on the
    &lt;span class="caps"&gt;JVM&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://groups.google.com/group/clojure"&gt;vibrant community&lt;/a&gt; (my
    &lt;a href="http://groups.google.com/group/fsharp-opensource"&gt;F# groups&lt;/a&gt;, by
    contrast, have had barely 2 messages in the past&amp;nbsp;month)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To get an idea of what I mean, here&amp;#8217;s an anonymous function to find the
odd numbers in a (lazy) &lt;a href="http://clojure.org/sequences"&gt;sequence&lt;/a&gt; (which
could be a list, vector, or hash&amp;nbsp;map):  &lt;/p&gt;
&lt;p&gt;This idea of &lt;a href="http://formpluslogic.blogspot.com/2009/07/clojure-lazy-seq-and-recursion.html"&gt;lazy
sequences&lt;/a&gt;
is powerful, because you can do things like get the &lt;a href="http://clojure-euler.wikispaces.com/Problem+007"&gt;10,001st prime
number&lt;/a&gt; without blowing
the&amp;nbsp;stack:  &lt;/p&gt;
&lt;p&gt;You can just see the number-crunchy goodness, mixed in with Lispy
functional&amp;nbsp;precision.  &lt;/p&gt;
&lt;p&gt;As far as practicality, there is simply too much awesome&amp;nbsp;stuff.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The language itself is available on
    &lt;a href="https://github.com/clojure/clojure"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It has nice &lt;a href="http://clojuredocs.org/"&gt;documentation&lt;/a&gt; to &lt;a href="http://dev.clojure.org/display/doc/Getting+Started"&gt;get you
    started&lt;/a&gt;&amp;nbsp;quickly&lt;/li&gt;
&lt;li&gt;There are great learning
    resources: &lt;a href="http://www.4clojure.com/"&gt;4Clojure&lt;/a&gt; &lt;a href="https://github.com/functional-koans/clojure-koans"&gt;clojure-koans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nice examples of algorithms such
    as &lt;a href="http://www.algolist.net/Algorithms/Sorting/Quicksort"&gt;Quicksort&lt;/a&gt;
    using &lt;a href="http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#Clojure"&gt;Clojure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thinkrelevance.com/blog/2008/09/16/pcl-clojure.html"&gt;Easy
    translation&lt;/a&gt;
    from &lt;a href="http://www.gigamonkeys.com/book/"&gt;Practical Common&amp;nbsp;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://www.jetbrains.com/idea/download/index.html"&gt;freely
    available&lt;/a&gt;
    &lt;a href="http://www.jetbrains.com/idea/"&gt;killer &lt;span class="caps"&gt;IDE&lt;/span&gt;&lt;/a&gt; &lt;a href="http://plugins.intellij.net/plugin/?id=4050"&gt;supporting
    Clojure&lt;/a&gt; with &lt;a href="https://github.com/technomancy/leiningen"&gt;project
    building&lt;/a&gt; and GitHub&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webnoir.org/"&gt;Simple&lt;/a&gt; to
    &lt;a href="https://github.com/weavejester/compojure/wiki"&gt;complex&lt;/a&gt; web
    application support to
    &lt;a href="http://mmcgrana.github.com/2010/07/develop-deploy-clojure-web-applications.html"&gt;&lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/a&gt;,
    &lt;a href="http://blog.heroku.com/archives/2011/7/5/clojure_on_heroku/"&gt;Heroku&lt;/a&gt;,
    &lt;a href="http://googlecode.blogspot.com/2010/05/better-performance-in-app-engine-with.html"&gt;Google App
    Engine&lt;/a&gt;
    and&amp;nbsp;others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can easily do &lt;span class="caps"&gt;TDD&lt;/span&gt; (test driven development), which is really handy
if, say, you&amp;#8217;ve got a bunch of math functions that you want to be sure
are correct when you port/rewrite&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a screenshot of &lt;a href="http://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; with a
typical &lt;a href="https://github.com/technomancy/leiningen"&gt;Leiningen&lt;/a&gt; project&amp;nbsp;open:  &lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;

&lt;/div&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;

[![](http://4.bp.blogspot.com/-M-dYvAMiipM/TtfPdohU_mI/AAAAAAAA_vE/NeiVEH5OKHs/s640/idea-lein.png)](http://4.bp.blogspot.com/-M-dYvAMiipM/TtfPdohU_mI/AAAAAAAA_vE/NeiVEH5OKHs/s1600/idea-lein.png)

&lt;/div&gt;

&lt;p&gt;You can see the typical Leiningen project layout, with /src and /test
folders and subfolders. First, we&amp;#8217;ll write a ~~function~~ test for a
function we want which sums over all values in a given&amp;nbsp;sequence:  &lt;/p&gt;
&lt;p&gt;The test is in C:\Projects\&lt;span class="caps"&gt;CDT&lt;/span&gt;\Newton\test\Newton.test\core.clj,
and the :use [Newton.utilities] tells it to look in the file
C:\Projects\&lt;span class="caps"&gt;CDT&lt;/span&gt;\Newton\src\Newton\utilities.clj for our function.
Note the use of metadata \^{:utilities true} to mark this as a utilities
test, which we&amp;#8217;ll use later for organization. Our test checks that our
to-be-defined sum test sums correctly over both a list and a&amp;nbsp;vector.  &lt;/p&gt;
&lt;p&gt;Now here&amp;#8217;s the contents of
C:\Projects\&lt;span class="caps"&gt;CDT&lt;/span&gt;\Newton\src\Newton\utilities.clj:  &lt;/p&gt;
&lt;p&gt;Finally, Leiningen allows us to choose test selectors so that we can
specify which tests we want to run via&amp;nbsp;project.clj:  &lt;/p&gt;
&lt;p&gt;Now by running lein at a command prompt (to save startup time) we can
pick our&amp;nbsp;tests:  &lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;

[![](http://1.bp.blogspot.com/-myffmQYgpC8/TtfWhU5qTQI/AAAAAAAA_vM/uTxhOaHJSO4/s640/lein.png)](http://1.bp.blogspot.com/-myffmQYgpC8/TtfWhU5qTQI/AAAAAAAA_vM/uTxhOaHJSO4/s1600/lein.png)

&lt;/div&gt;

&lt;p&gt;Note in the first case, we don&amp;#8217;t expect any tests to run (test! means
fetch dependencies and then run tests) because our sole test has been
marked as a :utility. In the second case, we tell it to run :utility and
it does, telling us that our test passed.&amp;nbsp;Success!  &lt;/p&gt;
&lt;p&gt;If our test had failed, clojure&amp;#8217;s test suite would give us good
information. Here, I&amp;#8217;m going to modify the second assertion to fail.
Watch what&amp;nbsp;happens:  &lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;

[![](http://4.bp.blogspot.com/-CqWRxYR47_Y/TtfXz8Po9GI/AAAAAAAA_vU/RvqznnUbXSk/s640/lein-test-fail.png)](http://4.bp.blogspot.com/-CqWRxYR47_Y/TtfXz8Po9GI/AAAAAAAA_vU/RvqznnUbXSk/s1600/lein-test-fail.png)

&lt;/div&gt;

&lt;p&gt;How cool is&amp;nbsp;that?  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve so far read &lt;a href="http://www.manning.com/rathore/"&gt;Clojure in Action&lt;/a&gt;
and &lt;a href="http://joyofclojure.com/"&gt;The Joy of Clojure&lt;/a&gt; (both highly
recommended), plus enough daily doses  to actually stop mucking about
and start with the &lt;a href="https://github.com/ucdavis/CDT"&gt;&lt;span class="caps"&gt;CDT&lt;/span&gt; code&lt;/a&gt;&amp;nbsp;already.  &lt;/p&gt;
&lt;p&gt;So, a modern Lisp with powerful IDEs, modern libraries from the &lt;span class="caps"&gt;JVM&lt;/span&gt;,
interactive &lt;span class="caps"&gt;REPL&lt;/span&gt;/&lt;span class="caps"&gt;TDD&lt;/span&gt;, great documentation, learning resources, and
books &amp;#8212; what&amp;#8217;s not to&amp;nbsp;like?  &lt;/p&gt;
&lt;/p&gt;</summary><category term="lisp"></category><category term="tdd"></category><category term="clojure"></category></entry><entry><title>Reflection tools for F#</title><link href="http://adamgetchell.org/embedding-gists-in-blogger.html" rel="alternate"></link><updated>2011-04-19T08:52:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2011-04-19:embedding-gists-in-blogger.html</id><summary type="html">&lt;p&gt;I went to the fabuluous &lt;a href="http://codeconf.com/"&gt;CodeConf 2011&lt;/a&gt; (view
&lt;a href="http://lanyrd.com/2011/codeconf/slides/"&gt;slides&lt;/a&gt;,
&lt;a href="https://github.com/blog/835-codeconf-2011-mission-accomplished"&gt;recaps&lt;/a&gt;
&lt;a href="http://www.peebs.org/2011/04/codeconf-2011-day-one/"&gt;here&lt;/a&gt;,
&lt;a href="http://thechangelog.com/post/4507882708/codeconf-sunday-summary"&gt;here&lt;/a&gt;,
and &lt;a href="https://convore.com/codeconf/"&gt;here&lt;/a&gt;) and the first talk was
&amp;#8220;Tinker Fairy&amp;#8221; &lt;a href="http://twitter.com/#!/drnic"&gt;Dr. Nic&lt;/a&gt; telling us to
&lt;a href="http://lanyrd.com/2011/codeconf/sdmxb/"&gt;build tools&lt;/a&gt; to do stuff that
we don&amp;#8217;t want to remember later. Then build tools to build those
tools &amp;#8212; tool&amp;nbsp;tools.  &lt;/p&gt;
&lt;p&gt;One of the neat modern takes on Lisp
&lt;a href="http://en.wikipedia.org/wiki/S-expression"&gt;s-expressions&lt;/a&gt; in modern
virtual machines like the &lt;span class="caps"&gt;CLR&lt;/span&gt; is
&lt;a href="http://en.wikipedia.org/wiki/Reflection_(computer_programming)"&gt;Reflection&lt;/a&gt;.
At least, I think that it will be useful in reversing Lisp macros and
expressions into the F#/&lt;span class="caps"&gt;OCAML&lt;/span&gt;&amp;nbsp;equivalents.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://flyingfrogblog.blogspot.com/"&gt;Dr. Jon Harrop&lt;/a&gt; gives a terse but
informative example in his book &lt;a href="http://fsharpnews.blogspot.com/2010/04/visual-f-2010-for-technical-computing.html"&gt;Visual F# 2010 for Technical
Computing&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;First, we want a union type which represents (i.e. abstracts away) the
F# type&amp;nbsp;system:  &lt;/p&gt;
&lt;p&gt;Next, we want a (recursive) function (called, straightforwardly enough,
type_of) that reflects (using FSharpType) and translates a given
System.Type object into one of the &amp;#8216;a ty union types defined&amp;nbsp;previously:  &lt;/p&gt;
&lt;p&gt;This then allows us to emit the following two liner which can parse
objects such as the List.fold function! (Note: everything after the ;;
is the F# Interactive&amp;nbsp;response.)  &lt;/p&gt;
&lt;p&gt;Neat stuff! I&amp;#8217;ve a thousand or two lines of Lisp to look at, so this is
not something I want to have to remember&amp;nbsp;later.&lt;/p&gt;</summary><category term="f#"></category></entry><entry><title>Software Archaeology</title><link href="http://adamgetchell.org/software-archaeology.html" rel="alternate"></link><updated>2011-04-11T22:19:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2011-04-11:software-archaeology.html</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Vernor_Vinge"&gt;Vernor Vinge&lt;/a&gt; prophetically
&lt;a href="http://books.slashdot.org/story/03/09/18/0411259/Review-A-Fire-Upon-the-Deep-Special-Edition"&gt;wrote of a
time&lt;/a&gt;
when programmer-archaeologists maintained the fabric of civilization by
diving into and modifying legacy code which ran the systems that society
depended&amp;nbsp;upon.&lt;/p&gt;
&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Various other folks have picked up on this notion, from the
[serious](http://java.sys-con.com/node/487614) to the
[humorous](http://giant-communist-robots.com/?p=154). Here, though, I&amp;#8217;ll
talk about this from my own perspective (which is what you came here
for, right?).

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

[Kernighan&amp;#8217;s](http://www.ieee.org/portal/cms_docs_societies/sscs/PrintEditions/200804.pdf)
saw goes that debugging code is twice as hard as writing it; therefore
we ought to keep our meaning clear and our code as simple as possible.
How to do so?

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

There are clear debates about that: [functional vs.
declarative](http://msdn.microsoft.com/en-us/library/bb669144.aspx),
[procedural vs.
object-oriented](http://www.virtuosimedia.com/dev/php/procedural-vs-object-oriented-programming-oop),
not to mention [Patterns &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;
Anti-Patterns](http://books.google.com/books?hl=en&amp;lr=&amp;id=HBAuixGMYWEC&amp;oi=fnd&amp;pg=&lt;span class="caps"&gt;PA383&lt;/span&gt;&amp;dq=patterns+and+antipatterns&amp;ots=emzw4QN8Dj&amp;sig=AFOJ5TeY4zHfa1pCKky8ux_X9hQ#v=onepage&amp;q=patterns%20and%20antipatterns&amp;f=false),
[Dependency Injection/Loose
Coupling](http://martinfowler.com/articles/injection.html),
[Aspect-Oriented
Programming](http://en.wikipedia.org/wiki/Aspect-oriented_programming),
etc. etc. These can be very fun to get into and there are diverse and
subtle points all around, that I won&amp;#8217;t attempt to do them justice here
but if you&amp;#8217;ve a free week or two read any of the above links and the
next five references thereafter and you&amp;#8217;ll come away more enlightened,
or more confused.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

But in the meantime, you&amp;#8217;ve either got to a) emit working code or b)
manage those who do a). And if you could do so without too badly
embarrassing yourself in the future (which is nigh impossible), or at
least, be willing to chalk them up as learning experiences, you&amp;#8217;re well
on your way to some sort of nirvana of ineffable, crystallized logic
which is a perfect solution to your problem.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

(Getting a clear problem statement itself being at least half of the
battle and most of the difficulty, given business processes that aren&amp;#8217;t
well understood, or mutate depending upon who&amp;#8217;s doing them or in which
context. But that discussion more properly belongs in the realm of
project management and business analysis, and won&amp;#8217;t be further remarked
upon here.)

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

If you&amp;#8217;re not a coder yourself (or horribly out of date), you can still
make a fair crack at judging the product by the team. [The Mythical
Man-Month](http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959)
is the canonical reference, but [Joel
Spolsky&amp;#8217;s](http://www.joelonsoftware.com/) [Joel
Test](http://www.joelonsoftware.com/articles/fog0000000043.html) is
pretty concise, descriptive, and useful.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Archaeology can imply adventurous, sunburned types digging around fossil
layers high in vast dusty mesas of stratified rock. And truth be told,
that&amp;#8217;s not a bad analogy for the cacophony of systems that the average
&lt;span class="caps"&gt;IT&lt;/span&gt; organization has inherited, cobbled together, purchased (often from a
now-defunct vendor), or perhaps in a fit of creativity &amp;#8212; produced.
After all, post dot-com, [Greenfield
development](http://footheory.com/blogs/donnfelker/archive/2008/05/05/software-development-greeenfield-vs-brownfield.aspx)
is rare.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

But Brownfield development is often so painful that most developers will
throw up their hands and rewrite from scratch, rather than attempting to
piece together the workings of an often poorly documented system written
with &amp;#8220;ancient&amp;#8221; methods/languages.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Hence, onto the first item on the Joel Test: source control.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

But not just any source control. [GitHub](https://github.com/).

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Why GitHub? Well, first, it has the elusive &amp;#8220;Alpha Coder mindshare&amp;#8221;.
While it may not matter one way or another to your business that the
Linux kernel, Git itself, jQuery, Ruby on Rails, and a host of other
important projects exist on GitHub, it matters to your programmers,
whether they know it or not (and the good ones will know it).

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

All of these actively maintained open source projects provide something
more interesting than mindshare: examples. Pick a programming language,
and you will very likely find an interesting project or two on GitHub
that has something worth learning. It may even prove to be the Rosetta
stone of programming languages &amp;#8212; you may find solutions to the same
problem in many different programming languages.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Second, [Social
Coding](http://radar.oreilly.com/2009/01/github-making-code-more-social.html).
Everyone knows of the usefulness of social networks &amp;#8212; they existed
before, but it&amp;#8217;s the tools that made them marketable/actionable. Social
coding in GitHub takes the usual forms &amp;#8212; followers, blogs, wikis,
issues, teams, organizations &amp;#8212; plus some more useful ones (e.g. the
[GitHub &lt;span class="caps"&gt;API&lt;/span&gt;](http://develop.github.com/)).

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

We used Team Foundation Server. It was a nice tool in our .&lt;span class="caps"&gt;NET&lt;/span&gt;
development shop &amp;#8212; a bit painful to setup with it&amp;#8217;s dependence on
SharePoint, but useful. However, it didn&amp;#8217;t scale too well in terms of
collaborators. We needed to add them as users into Active Directory,
fuss about with SharePoint and licensing, and so forth.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

So next we tried [CodePlex](http://www.codeplex.com/). CodePlex was,
essentially, &lt;span class="caps"&gt;TFS&lt;/span&gt; in the cloud, and it mostly worked. There were capacity
issues, and it wasn&amp;#8217;t always friendly with non .&lt;span class="caps"&gt;NET&lt;/span&gt; languages, but the
main reason we didn&amp;#8217;t adopt it wholesale was:

&lt;/div&gt;

&lt;div&gt;

1.  No way to make private repositories
2.  Often painful to connect into
3.  Went down/was slow often enough that we didn&amp;#8217;t want to rely on it.

&lt;div&gt;

This really illustrates the third virtue of GitHub, that it&amp;#8217;s a true
cloud service &amp;#8212; but cloud computing is all the hype right now and I
really wanted to illustrate it&amp;#8217;s particular benefits in this instance.

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

In going with GitHub, we created an organization for our, well,
organization. This gives us several important advantages over CodePlex:

&lt;/div&gt;

&lt;div&gt;

1.  Private repositories
2.  Teams
3.  Unlimited collaborators (in particular, we can mix and match between
    general GitHub accounts and team members)
4.  Blogs, Wikis, Gists, Issue Trackers with voting, per-line file
    commenting, and other social features
5.  Works well with any programming language
6.  Fast, decentralized development (Git works locally, so you can get
    on a plane, code, and upload your changes once you&amp;#8217;ve got internet
    access)
7.  Reliable versioning (Git uses hashes for files)
8.  Works well with any &lt;span class="caps"&gt;OS&lt;/span&gt;/&lt;span class="caps"&gt;IDE&lt;/span&gt; (Git has integration with Visual Studio,
    Eclipse, XCode plus command-line versions in most every &lt;span class="caps"&gt;OS&lt;/span&gt;)
9.  Git is a well-regarded distributed version control system (&lt;span class="caps"&gt;DCVS&lt;/span&gt;)

&lt;div&gt;

My programming team ported projects over from &lt;span class="caps"&gt;TFS&lt;/span&gt; and CodePlex in under
a day. By following projects, I can watch check-ins, view version
differences, open/close issues, and do all the usual software management
stuff without getting in the way. (Or better yet, delegate.)

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

The fees are pretty nominal (organizations get charged based on the
numbers of private repositories they want; public ones are free). GitHub
is hosted by RackSpace, so the reliability has been better than our
in-house &lt;span class="caps"&gt;TFS&lt;/span&gt; boxes. Today I just added someone outside our organization
to one of our projects with minimal hassle.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

If you&amp;#8217;re going to be digging up fossilized code, Git and GitHub are
fairly pleasant tools for the job.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

Look at the time! This isn&amp;#8217;t really everything I wanted to say, but I&amp;#8217;ve
probably said enough for now (and I have other pressing priorities
including my own research), so I&amp;#8217;ll leave further pontificating for
another time.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

I hope this was informative, or at least, entertaining!

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;div&gt;

(You can find me on GitHub [here](https://github.com/acgetchell)!)

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;

&lt;/p&gt;</summary></entry><entry><title>CDT rewrite toolbox</title><link href="http://adamgetchell.org/cdt-rewrite-toolbox.html" rel="alternate"></link><updated>2010-01-20T07:54:00-08:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2010-01-20:cdt-rewrite-toolbox.html</id><summary type="html">&lt;p&gt;So, my colleagues have developed a
&lt;a href="http://adamgetchell.blogspot.com/2007_10_01_archive.html"&gt;&lt;span class="caps"&gt;CDT&lt;/span&gt;&lt;/a&gt; program
that&amp;#8217;s usable. Fortunately for me, it&amp;#8217;s in &lt;span class="caps"&gt;LISP&lt;/span&gt;, which lacks parallel
processing, modern libraries, a nice &lt;span class="caps"&gt;IDE&lt;/span&gt;, and the other goodies I&amp;#8217;ve
become accustomed to in my work life. (That means I get to figure these
features out and thereby&amp;nbsp;contribute!)  &lt;/p&gt;
&lt;p&gt;Enter Visual Studio 2008, &lt;a href="http://ironpython.codeplex.com/"&gt;IronPython&lt;/a&gt;,
and &lt;a href="http://ironscheme.codeplex.com/"&gt;IronScheme&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Setting up IronScheme with Visual Studio 2008 was usefully detailed
&lt;a href="http://ironscheme.codeplex.com/wikipage?title=IronScheme%20Visual%20Studio%202008%20Integration&amp;amp;referringTitle=Documentation"&gt;here&lt;/a&gt;:
(note, you need
&lt;a href="http://msdn.microsoft.com/en-us/library/bb707481.aspx"&gt;RegPkg&lt;/a&gt; via the
&lt;a href="http://www.microsoft.com/downloads/details.aspx?familyid=30402623-93ca-479a-867c-04dc45164f5b&amp;amp;displaylang=en"&gt;Visual Studio 2008
&lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;Setting up IronPython with Visual Studio 2008 via &lt;a href="http://ironpythonstudio.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=8934"&gt;IronPython Studio
(integrated
setup)&lt;/a&gt;:  &lt;/p&gt;
&lt;p&gt;And voila, no more excuses to complain about&amp;nbsp;development.  &lt;/p&gt;
&lt;p&gt;(Yes, the end goal is to make it Python and cross-platform, although I&amp;#8217;m
really eying&amp;nbsp;F#)&lt;/p&gt;</summary><category term="lisp"></category><category term="cdt"></category><category term="python"></category></entry><entry><title>ProjectEuler on F#</title><link href="http://adamgetchell.org/projecteuler-on-f.html" rel="alternate"></link><updated>2007-11-19T09:24:00-08:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-11-19:projecteuler-on-f.html</id><summary type="html">&lt;p&gt;So, whilst poring through Pickering&amp;#8217;s book and browsing through &lt;a href="http://tomasp.net/about/fsharp.aspx"&gt;Tomas
Petricek&amp;#8217;s blog&lt;/a&gt; (which has a
promising &lt;a href="http://tomasp.net/articles/fswebtools-intro.aspx"&gt;F# &lt;span class="caps"&gt;AJAX&lt;/span&gt;
toolkit&lt;/a&gt;, which alas,
doesn&amp;#8217;t work yet) and stealing glances at the &lt;a href="http://caml.inria.fr/pub/docs/oreilly-book/html/index.html"&gt;O&amp;#8217;Reilly online &lt;span class="caps"&gt;OCAML&lt;/span&gt;
book&lt;/a&gt;, I
decided to write some programs to exercise my understanding of the
material. After some stumbling, I found &lt;a href="http://projecteuler.net/index.php?section=problems"&gt;Project
Euler&lt;/a&gt;, a great site
full of math programming&amp;nbsp;puzzles.  &lt;/p&gt;
&lt;p&gt;I solved &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=1"&gt;Problem
#1&lt;/a&gt; naively in
\~ 10 lines of F# using list comprehensions and recursion (I&amp;#8217;ve seen a
one-liner using Seq.fold). &lt;a href="http://projecteuler.net/index.php?section=problems&amp;amp;id=2"&gt;Problem
#2&lt;/a&gt; builds on
this and takes about 30, including a debugging function to print results
(&lt;a href="http://blogs.msdn.com/chrsmith/archive/2007/10/26/Project-Euler-in-F_2300_-_2D00_-Problem-2.aspx"&gt;better
solutions&lt;/a&gt;,
using Seq.unfold, do it in 10). I posted my code solutions to the
&lt;a href="http://projecteuler.net/index.php?section=forum"&gt;forum&lt;/a&gt;, so as not to
spoil anyone else&amp;#8217;s fun (you can only post to the forum for that problem
after you&amp;#8217;ve solved it). It&amp;#8217;s very interesting to see all of the other
solutions in different languages, and the algorithm discussion is
fascinating&amp;nbsp;too.  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also quite impressive how easily F# morphs into math problems
(though I am still writing some horrid C#/F# hybrid&amp;nbsp;presently).  &lt;/p&gt;
&lt;p&gt;Oh, and here&amp;#8217;s a nifty 100-line podcast downloader,
&lt;a href="http://dcooney.com/ViewEntry.aspx?ID=499"&gt;slurppodcasts&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;(Note that &lt;span style="color: rgb(51, 51, 255);"&gt;Idioms.using&lt;/span&gt; is
no longer necessary, since &lt;span
style="color: rgb(51, 51, 255);"&gt;using&lt;/span&gt; is integrated into&amp;nbsp;F#)  &lt;/p&gt;
&lt;p&gt;Finally, here&amp;#8217;s &lt;a href="http://feeds.feedburner.com/planet_fsharp"&gt;Feedburner&amp;#8217;s Planet
F#&lt;/a&gt;.&lt;/p&gt;</summary><category term=".net"></category><category term="f#"></category></entry><entry><title>Fun with Microsoft’s Enterprise Library</title><link href="http://adamgetchell.org/fun-with-microsofts-enterprise-library.html" rel="alternate"></link><updated>2007-09-22T23:42:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:fun-with-microsofts-enterprise-library.html</id><summary type="html">&lt;p&gt;Oh yeah, back to my day-job: I&amp;#8217;m a&amp;nbsp;programmer.  &lt;/p&gt;
&lt;p&gt;So we&amp;#8217;ve got a new application to update the current stone-tablet
process in the University that determines if students actually&amp;nbsp;graduate.  &lt;/p&gt;
&lt;p&gt;Now, I like to write good code, and furthermore, if someone else writes
it for me, that&amp;#8217;s even better. So if you are working on the .&lt;span class="caps"&gt;NET&lt;/span&gt;
platform, you&amp;#8217;d do well to look at the &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=0325B97A-9534-4349-8038-D56B38EC394C&amp;amp;displaylang=en"&gt;Enterprise
Library&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, this is several thousand lines of code to pore over, good
stuff, but unfortunately we have these minor annoying things called
deadlines which prevents us from taking the time to grok everything&amp;nbsp;properly.  &lt;/p&gt;
&lt;p&gt;Come to think of it, this happens in Physics, too &amp;#8212; I never have enough
time to actually understand all the details of the problems I&amp;#8217;m supposed
to be solving, but my advisor assures me that this is the proper state
of things in research, as opposed to writing text books, and three
guesses as to which one gets you&amp;nbsp;tenure.  &lt;/p&gt;
&lt;p&gt;Back to the matter at hand &amp;#8212; the Enterprise Library. Looking around at
some good &lt;a href="http://blog.hishambaz.com/archive/2005/01/29/194.aspx"&gt;working
examples&lt;/a&gt; ,
hilarity and pandemonium ensues when you try to do something simple like
write to the Event Log when your application barfs. (Did I mention this
doesn&amp;#8217;t come up a lot because instrumenting software seems to be a &amp;#8230;
novelty?) I&amp;#8217;m pretty sure that developers should &lt;span
style="font-weight: bold;"&gt;not&lt;/span&gt; be doing things like editing the
Registry, installing Services, or setting accounts programs run under
with full admin rights &amp;#8212; I was a system administrator in a previous
job, and I &lt;span style="font-weight: bold;"&gt;hated&lt;/span&gt; letting
programmers do those kind of&amp;nbsp;things.  &lt;/p&gt;
&lt;p&gt;So I won&amp;#8217;t inflict the same damage on our own, long-suffering&amp;nbsp;sysadmin.  &lt;/p&gt;
&lt;p&gt;Now, my 52-line class solution doesn&amp;#8217;t do all the bells and whistles the
&lt;span class="caps"&gt;EL&lt;/span&gt; does, but it sure doesn&amp;#8217;t require all the nastiness&amp;nbsp;above:  &lt;/p&gt;
&lt;div class="cf"&gt;

&lt;span class="cb1"&gt;using&lt;/span&gt; System;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Diagnostics;

 

&lt;span class="cb1"&gt;namespace&lt;/span&gt; &lt;span class="caps"&gt;CAESDO&lt;/span&gt;

{

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Methods to handle
error reporting&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

    &lt;span class="cb1"&gt;public&lt;/span&gt; &lt;span class="cb1"&gt;class&lt;/span&gt;
ErrorHandler

    {

        &lt;span class="cb1"&gt;public&lt;/span&gt; ErrorHandler()

        {

            &lt;span class="cb3"&gt;// Register application as source for
Application log&lt;/span&gt;

            &lt;span class="cb1"&gt;if&lt;/span&gt;
(!EventLog.SourceExists(&amp;#8220;FacultyStudentSurveys&amp;#8221;))

                EventLog.CreateEventSource(&amp;#8220;FacultyStudentSurveys&amp;#8221;,
&amp;#8220;Application&amp;#8221;);

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Writes an error
message to the Application Event Log&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;param name="error"\&gt;&lt;/span&gt;&lt;span class="cb3"&gt;The thrown
exception&lt;/span&gt;&lt;span class="cb2"&gt;\&lt;/param\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
WriteToEventLog(Exception error)

        {

            &lt;span class="cb1"&gt;const&lt;/span&gt; &lt;span
class="cb1"&gt;string&lt;/span&gt; source = &amp;#8220;Commencement&amp;#8221;;

            &lt;span class="cb1"&gt;const&lt;/span&gt; &lt;span
class="cb1"&gt;string&lt;/span&gt; logName = &amp;#8220;Application&amp;#8221;;

            EventLogEntryType enumType = EventLogEntryType.Error;

 

            EventLog objectLog = &lt;span class="cb1"&gt;new&lt;/span&gt;
EventLog(logName);

            objectLog.Source = source;

            objectLog.WriteEntry(error.Message, enumType, 1 );

        }

 

        &lt;span class="cb1"&gt;internal&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
WriteToEventLog(&lt;span class="cb1"&gt;string&lt;/span&gt; message, &lt;span
class="cb1"&gt;bool&lt;/span&gt; success)

        {

            &lt;span class="cb1"&gt;const&lt;/span&gt; &lt;span
class="cb1"&gt;string&lt;/span&gt; source = &amp;#8220;Commencement&amp;#8221;;

            &lt;span class="cb1"&gt;const&lt;/span&gt; &lt;span
class="cb1"&gt;string&lt;/span&gt; logName = &amp;#8220;Application&amp;#8221;;

            EventLogEntryType enumType;

 

            &lt;span class="cb1"&gt;if&lt;/span&gt; (success)

            {

                enumType = EventLogEntryType.Information;

            }

            &lt;span class="cb1"&gt;else&lt;/span&gt;

            {

                enumType = EventLogEntryType.Error;

            }

            EventLog objectLog = &lt;span class="cb1"&gt;new&lt;/span&gt;
EventLog(logName);

            objectLog.Source = source;

            objectLog.WriteEntry(message, enumType);

        }

    }

}

&lt;/div&gt;

&lt;p&gt;I&amp;#8217;m sure I&amp;#8217;ve missed something obvious.&amp;nbsp;Anyone?  &lt;/p&gt;
&lt;p&gt;I just got a reply from the Hisam Baz, author of the above weblog which
says, &amp;#8220;Why write 52 lines of code when you can write&amp;nbsp;1?&amp;#8221;.  &lt;/p&gt;
&lt;p&gt;To which I reply, &amp;#8220;I&amp;#8217;d be happy to write 1 line of code &amp;#8212; if it&amp;nbsp;works.&amp;#8221;  &lt;/p&gt;
&lt;p&gt;Which brings us to the second&amp;nbsp;problem:  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-weight: bold;"&gt;Non-portable references to the Global
Assembly Cache in &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Once you actually try to use the Enterprise Library, you&amp;#8217;ll often come
across this bit of&amp;nbsp;advice:  &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;References  &lt;/p&gt;
&lt;p&gt;&lt;/span&gt;&lt;span style="font-style: italic;"&gt;Then from your application, add
references to
Microsoft.Practices.EnterpriseLibrary.Configuration.dll&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;and
Microsoft.Practices.EnterpriseLibrary.Logging.dll from the C:\Program
Files\Microsoft Enterprise Library\bin\ directory. You should
consider signing the assemblies and then adding them to the &lt;span class="caps"&gt;GAC&lt;/span&gt;. You
should also add a copy of the assemblies to C:\Program Files\Microsoft
Visual Studio .&lt;span class="caps"&gt;NET&lt;/span&gt; 2003\Common7\&lt;span class="caps"&gt;IDE&lt;/span&gt;. Once you do that, you can select
the assemblies directly from the &amp;#8220;Add Reference&amp;#8221; dialog. One you&amp;#8217;ve
added the reference, then add the appropriate using statement - using
Microsoft.Practices.EnterpriseLibrary.Logging - to your&amp;nbsp;code.&amp;#8221;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only one problem &amp;#8212; it doesn&amp;#8217;t&amp;nbsp;work.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When Visual Studio 2003 .&lt;span class="caps"&gt;NET&lt;/span&gt; looks for references in the Global
Assembly Cache, it never updates its view of the &lt;span class="caps"&gt;GAC&lt;/span&gt; in response to what
you&amp;#8217;ve added &amp;#8212; that&amp;#8217;s done by the
&lt;a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;306149"&gt;registry&lt;/a&gt;
(bleah). Which is why you&amp;#8217;ve got to add a copy where &lt;span class="caps"&gt;VS&lt;/span&gt; can find&amp;nbsp;it.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When writing &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; applications, references should be against
assemblies in the webserver &lt;span class="caps"&gt;GAC&lt;/span&gt;. And naturally, installer projects
written in &lt;span class="caps"&gt;VS&lt;/span&gt; 2003 do not install the files in the &lt;span class="caps"&gt;GAC&lt;/span&gt; automatically, as
they do for the web application itself. So now you have to manually add
assemblies to the &lt;span class="caps"&gt;GAC&lt;/span&gt; and write registry entries for each assembly to be
resolved by the .&lt;span class="caps"&gt;NET&lt;/span&gt;&amp;nbsp;runtime.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wait, why are we &lt;a href="http://www.sellsbrothers.com/news/showTopic.aspx?ixTopic=1199"&gt;using the
&lt;span class="caps"&gt;GAC&lt;/span&gt;&lt;/a&gt;&amp;nbsp;again?  &lt;/p&gt;
&lt;p&gt;Okay, looks like I&amp;#8217;ll have to wade through &lt;a href="http://www.grimes.demon.co.uk/workshops/fusionWS.htm"&gt;Richard Grime&amp;#8217;s Fusion
Workshop&lt;/a&gt;. Except
that it doesn&amp;#8217;t cover the case I&amp;#8217;m interested in.&amp;nbsp;Joy.  &lt;/p&gt;
&lt;p&gt;Well, I sure hope that the 10 lines of code I&amp;#8217;ll end up emitting in this
exercise will exceed the several thousand I could be writing if I just
wrote everything&amp;nbsp;myself.  &lt;/p&gt;
&lt;p&gt;What&amp;#8217;s that again about the virtues of programmers? Laziness,
impatience, and hubris. Oh, alright&amp;nbsp;then.&lt;/p&gt;
&lt;/p&gt;</summary><category term=".net"></category></entry><entry><title>Fun with Microsoft Enterprise Library, part 2</title><link href="http://adamgetchell.org/fun-with-microsoft-enterprise-library.html" rel="alternate"></link><updated>2007-09-22T23:41:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:fun-with-microsoft-enterprise-library.html</id><summary type="html">&lt;p&gt;Okay, I can see that this is going to be a long series&amp;nbsp;&amp;#8230;.  &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s what I&amp;#8217;m talking about on how to get Visual Studio to see
Enterprise Library assemblies without browsing (taken from the GotDotNet
workspace patterns &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; practices: Enterprise Library: Message&amp;nbsp;Boards):  &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;span style="font-style: italic;"&gt;Do you want to see EntLib assemblies
in Add References message box?&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;Create a text file named entlib.reg,
and add this content:&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;Windows Registry Editor Version&amp;nbsp;5.00&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span
style="font-style: italic;"&gt;[HKEY_LOCAL_MACHINE\&lt;span class="caps"&gt;SOFTWARE&lt;/span&gt;\Microsoft\VisualStudio\7.1\AssemblyFolders\Enterprise
Library]&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;@=&amp;#8221;C:&amp;#92;Program Files&amp;#92;Microsoft
Enterprise&amp;nbsp;Library&amp;#92;bin&amp;#92;&amp;#8221;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;Double click on the file and you&amp;#8217;ll be
asked whether to add this registry key. Click yes, restart vs.net and
there you go.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;(it is assumed that assemblies are in
their default folder - otherwise, change the path above).&lt;/span&gt;&amp;#8221;  &lt;/p&gt;
&lt;p&gt;Sigh. I really really try to avoid the Registry when&amp;nbsp;possible.  &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s another neat trick for sorting out the structure of the
Enterprise Library: open one of the solutions in Visual Studio, select
Project-&gt; Visio &lt;span class="caps"&gt;UML&lt;/span&gt; -&gt; Reverse&amp;nbsp;Engineer.  &lt;/p&gt;
&lt;p&gt;Too bad all it actually does is generate a 75K blank Visio file, because
Visio is unable to resolve all of the&amp;nbsp;references.  &lt;/p&gt;
&lt;p&gt;I suppose this will work for code that&amp;#8217;s so simple that a &lt;span class="caps"&gt;UML&lt;/span&gt; diagram
isn&amp;#8217;t&amp;nbsp;needed.  &lt;/p&gt;
&lt;p&gt;Moving right along, I&amp;#8217;ve also found how to sign all of the Enterprise
Library Asemblies! You just generate your public/private key pair, and
then reference them in the GlobalAssemblyInfo.cs file&amp;nbsp;in:  &lt;/p&gt;
&lt;p&gt;C:\Program Files\Microsoft Enterprise Library\src&lt;br /&gt;
This file gets referenced by every project when it&amp;#8217;s compiled.&amp;nbsp;Yay!  &lt;/p&gt;
&lt;p&gt;Except that every project&amp;#8217;s AssemblyInfo.cs contains blank&amp;nbsp;references:  &lt;/p&gt;
&lt;p&gt;[assembly : AssemblyDelaySign(false)]&lt;br /&gt;
[assembly : AssemblyKeyFile(&amp;#8220;&amp;#8221;)]&lt;br /&gt;
[assembly :&amp;nbsp;AssemblyKeyName(&amp;#8220;&amp;#8221;)]  &lt;/p&gt;
&lt;p&gt;Which overwrite what gets pulled in from&amp;nbsp;GlobalAssemblyInfo.cs.  &lt;/p&gt;
&lt;p&gt;So you have to go through every project&amp;#8217;s AssemblyInfo.cs file and
remove those 3&amp;nbsp;lines.  &lt;/p&gt;
&lt;p&gt;Sigh. There&amp;#8217;s 23 projects in the Security section alone, which is sort
of the &lt;span style="font-style: italic;"&gt;sine qua non&lt;/span&gt;for using
the &lt;span class="caps"&gt;EL&lt;/span&gt; to begin with, for my&amp;nbsp;purposes.  &lt;/p&gt;
&lt;p&gt;Well, Caching, Configuration, Data, ExceptionHandling, and Logging are
also&amp;nbsp;useful.  &lt;/p&gt;
&lt;p&gt;One step at a&amp;nbsp;time.  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve gotten Logging to work. Unfortunately, every time it logs it throws
three error&amp;nbsp;messages:  &lt;/p&gt;
&lt;p&gt;&lt;span class="messagecontent"&gt;&lt;span style="font-style: italic;"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Failed
to create instances of performance counter &amp;#8216;Distributor: # of Logs
Distributed/Sec&amp;#8217; - The requested Performance Counter is not a custom
counter, it has to be initialized as&amp;nbsp;ReadOnly..&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;For more information, see Help and
Support Center at&amp;nbsp;http://go.microsoft.com/fwlink/events.asp.&amp;#8221;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Failed to fire the &lt;span class="caps"&gt;WMI&lt;/span&gt; event
&amp;#8216;LoggingLogWrittenEvent&amp;#8217;. Exception: System.Exception: This schema for
this assembly has not been registered with &lt;span class="caps"&gt;WMI&lt;/span&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;at
System.Management.Instrumentation.Instrumentation.Initialize(Assembly
assembly)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;at
System.Management.Instrumentation.Instrumentation.GetInstrumentedAssembly(Assembly
assembly)&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;at
System.Management.Instrumentation.BaseEvent.Fire()&lt;/span&gt;&lt;br /&gt;
&lt;span style="font-style: italic;"&gt;at
Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.InstrumentedEvent.FireWmiEventCore(BaseEvent&amp;nbsp;baseEvent).&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;For more information, see Help and
Support Center at&amp;nbsp;http://go.microsoft.com/fwlink/events.asp.&amp;#8221;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;and  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Failed to create instances of
performance counter &amp;#8216;Client: # of Logs Written/Sec&amp;#8217; - The requested
Performance Counter is not a custom counter, it has to be initialized as&amp;nbsp;ReadOnly..&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span style="font-style: italic;"&gt;For more information, see Help and
Support Center at&amp;nbsp;http://go.microsoft.com/fwlink/events.asp.&amp;#8221;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Presumably these counters are installed as part of the &lt;span class="caps"&gt;EL&lt;/span&gt; service
installation, but going through the batch file yields for&amp;nbsp;logging:  &lt;/p&gt;
&lt;p&gt;@&lt;span class="caps"&gt;ECHO&lt;/span&gt;.&lt;br /&gt;
@&lt;span class="caps"&gt;ECHO&lt;/span&gt; &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;br /&gt;
@&lt;span class="caps"&gt;ECHO&lt;/span&gt; Installing Services for the Logging and Instrumentation
Application Block&lt;br /&gt;
@&lt;span class="caps"&gt;ECHO&lt;/span&gt; &amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-&lt;br /&gt;
@&lt;span class="caps"&gt;ECHO&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;if Exist Microsoft.Practices.EnterpriseLibrary.Logging.dll installutil
%1 Microsoft.Practices.EnterpriseLibrary.Logging.dll&lt;br /&gt;
@if errorlevel 1 goto&amp;nbsp;:error  &lt;/p&gt;
&lt;p&gt;So I&amp;#8217;d like to break out whatever counters are needed so I can install
them on the webserver, and ideally, be able to script this installation
for production code on a production server with an Installer&amp;nbsp;project.  &lt;/p&gt;
&lt;p&gt;Although I&amp;#8217;m strongly tempted to just go back to using my ErrorHandling
class, which doesn&amp;#8217;t need anything installed&amp;nbsp;anywhere.  &lt;/p&gt;
&lt;p&gt;No, I&amp;#8217;ll persist in using the &lt;span class="caps"&gt;EL&lt;/span&gt;. I&amp;#8217;m sure there will be a payoff &amp;#8212;
like extending the Logging class to handle &lt;span class="caps"&gt;XML&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, to extend the &lt;span class="caps"&gt;EL&lt;/span&gt; one should be cognizant of all the Unit
Tests there built to ensure its continued functionality. So I need that
book on Test Driven Development real soon&amp;nbsp;now.  &lt;/p&gt;
&lt;p&gt;Well, at least I&amp;#8217;m not bored.&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;</summary><category term=".net"></category></entry><entry><title>Enterprise Library authentication</title><link href="http://adamgetchell.org/enterprise-library-authentication.html" rel="alternate"></link><updated>2007-09-22T23:40:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:enterprise-library-authentication.html</id><summary type="html">&lt;p&gt;&lt;a href="http://weblogs.asp.net/drohrer/"&gt;Doug Rohrer&lt;/a&gt;, one of
&lt;a href="http://www.avanade.com/"&gt;Avanade&lt;/a&gt; guys who worked on the Enterprise
Library, has posted a fantastic End to End Enterprise Library project
which incorporates the &lt;span class="caps"&gt;EL&lt;/span&gt; into &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; and Winforms&amp;nbsp;applications.  &lt;/p&gt;
&lt;p&gt;Using Collin Collier&amp;#8217;s wonderful &lt;a href="http://www.jtleigh.com/people/colin/software/CopySourceAsHtml/"&gt;Copy Source As
&lt;span class="caps"&gt;HTML&lt;/span&gt;&lt;/a&gt;
makes blogging the code much&amp;nbsp;easier.  &lt;/p&gt;
&lt;p&gt;Looking at Doug&amp;#8217;s work, we run into the common pattern of writing a base
page class which all asp.net pages inherit. Then he overrides the OnInit
function to kickstart&amp;nbsp;authentication.  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been using an &lt;a href="http://support.microsoft.com/default.aspx?scid=kb;%5BLN%5D;Q307996"&gt;&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Http
Module&lt;/a&gt;
to trap OnAuthenticate, but this is an interesting approach. Here&amp;#8217;s
Dougs BasePage&amp;nbsp;class:  &lt;/p&gt;
&lt;div class="cf"&gt;

&lt;span class="cb1"&gt;using&lt;/span&gt; System;

&lt;span class="cb1"&gt;using&lt;/span&gt;
Microsoft.Practices.EnterpriseLibrary.Security;

&lt;span class="cb1"&gt;using&lt;/span&gt; SecCache =
Microsoft.Practices.EnterpriseLibrary.Security.Cache;

&lt;span class="cb1"&gt;using&lt;/span&gt;
Microsoft.Practices.EnterpriseLibrary.Configuration;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web.Security;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Security.Principal;

&lt;span class="cb1"&gt;using&lt;/span&gt; EntLibCommonCSharp;

 

 

&lt;span class="cb1"&gt;namespace&lt;/span&gt; EntLibWebCSharp

{

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Summary description
for BasePage.&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

    &lt;span class="cb1"&gt;public&lt;/span&gt; &lt;span class="cb1"&gt;class&lt;/span&gt;
BasePage: System.Web.&lt;span class="caps"&gt;UI&lt;/span&gt;.Page

    {

 

&lt;span class="cb1"&gt;        \#region&lt;/span&gt; Private Variables

 

        &lt;span class="cb1"&gt;private&lt;/span&gt; IAuthenticationProvider
\_authenProvider;

        &lt;span class="cb1"&gt;private&lt;/span&gt; IAuthorizationProvider
\_authorProvider;

        &lt;span class="cb1"&gt;private&lt;/span&gt; IRolesProvider \_rolesProvider;

        &lt;span class="cb1"&gt;private&lt;/span&gt; ISecurityCacheProvider
\_secCacheProvider;

        &lt;span class="cb1"&gt;private&lt;/span&gt; IPrincipal \_principal;

        &lt;span class="cb1"&gt;private&lt;/span&gt;
EntLibCommonCSharp.AppConfigData \_config;

 

&lt;span class="cb1"&gt;        \#endregion&lt;/span&gt;

 

&lt;span class="cb1"&gt;        \#region&lt;/span&gt; Public Properties

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; An Enterprize
Library Authentication Provider instance. &lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Used to determine
if a user&amp;#8217;s credentials are valid.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; IAuthenticationProvider
AuthenProvider {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==\_authenProvider) {

                    \_authenProvider =
AuthenticationFactory.GetAuthenticationProvider();

                }

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_authenProvider;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; An Enterprize
Library Authorization Provider instance. &lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Used to determine
if a user is permitted to perform a certain action.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; IAuthorizationProvider
AuthorProvider {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==\_authorProvider) {

                    \_authorProvider =
AuthorizationFactory.GetAuthorizationProvider();

                }

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_authorProvider;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; An Enterprize
Library Roles Provider instance. &lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Used to retrieve
a principal object given an identity.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; IRolesProvider RolesProvider {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==\_rolesProvider) {

                    \_rolesProvider = RolesFactory.GetRolesProvider();

                }

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_rolesProvider;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; An Enterprize
Library Security Cache Provider instance.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Used to store and
retrieve a principal object given a security token.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; ISecurityCacheProvider
SecCacheProvider {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==\_secCacheProvider) {

                    \_secCacheProvider =
SecurityCacheFactory.GetSecurityCacheProvider();

                }

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_secCacheProvider;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; The current
principal&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; IPrincipal Principal {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_principal;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Provides easy
access to configuration data in the application config file.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; AppConfigData Config {

            &lt;span class="cb1"&gt;get&lt;/span&gt; {

                &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==\_config) {

                    \_config =
(AppConfigData)ConfigurationManager.GetConfiguration(AppConfigManager.SectionName);

                }

                &lt;span class="cb1"&gt;return&lt;/span&gt; \_config;

            }

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Sets the
principal for this page request.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;param name="principal"\&gt;&lt;/span&gt;&lt;span class="cb3"&gt;The
principal to use for the rest of the request.&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/param\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;internal&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
SetPrincipal(IPrincipal principal) {

            \_principal = principal;

        }

 

 

&lt;span class="cb1"&gt;        \#endregion&lt;/span&gt;

 

        &lt;span class="cb1"&gt;public&lt;/span&gt; BasePage()

        {

            &lt;span class="cb3"&gt;// No constructor necessary&lt;/span&gt;

        }

 

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Fires at the
beginning of the page lifecycle.  Overriden here to retrieve principal
data from the&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Enterprise
Library Security Cache provider or, if unable, to redirect to he login
page.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; The Login.aspx
page will add the appropriate token via the &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; forms authentication
cookie&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; if the user
successfully logs in.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;param name="e"\&gt;\&lt;/param\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;protected&lt;/span&gt; &lt;span
class="cb1"&gt;override&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
OnInit(EventArgs e) {

            &lt;span class="cb1"&gt;base&lt;/span&gt;.OnInit(e);

            &lt;span class="cb3"&gt;// Make sure to skip this step if you&amp;#8217;re
already on the login page&lt;/span&gt;

            &lt;span class="cb1"&gt;if&lt;/span&gt;
(ResolveUrl(&amp;#8220;\~/Login.aspx&amp;#8221;)!=Request.Url.AbsolutePath) {

                &lt;span class="cb1"&gt;try&lt;/span&gt; {

                    &lt;span class="cb3"&gt;// Load the principal from the
FormsAuthentication ticket information.&lt;/span&gt;

                    FormsAuthenticationTicket ticket =
FormsAuthentication.Decrypt((&lt;span
class="cb1"&gt;string&lt;/span&gt;)Request.Cookies[FormsAuthentication.FormsCookieName].Value);

                    GuidToken token = &lt;span class="cb1"&gt;new&lt;/span&gt;
GuidToken(&lt;span class="cb1"&gt;new&lt;/span&gt; System.Guid(ticket.UserData));

                    IPrincipal principal =
SecCacheProvider.GetPrincipal(token);

                    &lt;span class="cb1"&gt;if&lt;/span&gt; (&lt;span
class="cb1"&gt;null&lt;/span&gt;==principal) {

                        Response.Redirect(&amp;#8220;\~/Login.aspx&amp;#8221;);

                    } &lt;span class="cb1"&gt;else&lt;/span&gt; {

                        SetPrincipal(principal);

                    }

                } &lt;span class="cb1"&gt;catch&lt;/span&gt; (Exception) {

                    &lt;span class="cb3"&gt;// If we have any issues, redirect
to Login&lt;/span&gt;

                    Response.Redirect(ResolveUrl(&amp;#8220;\~/Login.aspx&amp;#8221;));

                }

            }

        }

 

 

    }

}

&lt;/div&gt;

&lt;p&gt;Cool&amp;nbsp;stuff!&lt;/p&gt;
&lt;/p&gt;</summary><category term=".net"></category></entry><entry><title>Fun with ASP.NET security and Windows 2003 SP1 breakage</title><link href="http://adamgetchell.org/fun-with-aspnet-security-and-windows.html" rel="alternate"></link><updated>2007-09-22T23:40:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:fun-with-aspnet-security-and-windows.html</id><summary type="html">&lt;p&gt;Problem: you want secure database access, using a connection string like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="cf"&gt;

&lt;span class="cb1"&gt;\&lt;&lt;/span&gt;&lt;span class="cb2"&gt;add&lt;/span&gt;&lt;span
class="cb3"&gt;&lt;/span&gt;&lt;span class="cb4"&gt;key&lt;/span&gt;&lt;span
class="cb1"&gt;=&amp;#8221;DatabaseConnection&amp;#8221;&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb4"&gt;value&lt;/span&gt;&lt;span class="cb1"&gt;=&amp;#8221;server=&lt;span class="caps"&gt;SERVER&lt;/span&gt;;Persist
Security Info=False;database=&lt;span class="caps"&gt;DATABASE&lt;/span&gt;;Integrated
Security=&lt;span class="caps"&gt;SSPI&lt;/span&gt;;&amp;#8221;/\&gt;&lt;/span&gt;

&lt;/div&gt;

&lt;p&gt;Solution: First, we&amp;#8217;re running &lt;span class="caps"&gt;IIS6&lt;/span&gt;.0. So we can set up a separate
Application Pool, and setup credentials for that application pool to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;We &lt;span style="FONT-WEIGHT: bold;"&gt;don&amp;#8217;t&lt;/span&gt; want to use
Impersonation, because then our connection credentials will run as the
application user, which may be different for each request, which will
slow database access down because we won&amp;#8217;t be able to use database
connection&amp;nbsp;pooling.&lt;/p&gt;
&lt;p&gt;We &lt;span style="FONT-WEIGHT: bold;"&gt;don&amp;#8217;t&lt;/span&gt; want to use a domain
account, because exploiting that account gives a free ride (and
reconnaissance) to our entire&amp;nbsp;network.&lt;/p&gt;
&lt;p&gt;We &lt;span style="FONT-WEIGHT: bold;"&gt;do&lt;/span&gt; want to use a local
account, with minimal rights on the Windows 2003/&lt;span class="caps"&gt;IIS6&lt;/span&gt;.0 server. We can
then duplicate that account on the &lt;span class="caps"&gt;SQL&lt;/span&gt; server, assign it appropriate
rights to the databases we&amp;#8217;re using (and specifically, the stored
procedures), and then use pass-through&amp;nbsp;authentication.&lt;/p&gt;
&lt;p&gt;I used the &lt;span class="caps"&gt;ASPNET&lt;/span&gt; account (which will cause problems later, but they&amp;#8217;re
interesting ones), though the account really doesn&amp;#8217;t matter (i.e. I did
&lt;span style="FONT-WEIGHT: bold;"&gt;not&lt;/span&gt; use this account on our
production server, but another one like it.) I think it&amp;#8217;s better to live
dangerously on development boxes, to catch problems early. Of course,
that&amp;#8217;s not all. In order for the account to be able to startup an
application pool, it has to be a member of the IIS_WPG group. I didn&amp;#8217;t
find that anywhere in &lt;span class="caps"&gt;MSDN&lt;/span&gt; or the &lt;span class="caps"&gt;KB&lt;/span&gt; articles, but by&amp;nbsp;experimentation.&lt;/p&gt;
&lt;p&gt;So, pick an account, add it to the IIS_WPG group, create an application
pool running under that account, duplicate that account on your &lt;span class="caps"&gt;SQL&lt;/span&gt;
server, set permissions to the databases and stored procedures&amp;nbsp;desired.&lt;/p&gt;
&lt;p&gt;Voila,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Problem #2: You want to use the Enterprise Library Data Access
Application Block. So following the guidelines you write some code like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="cf"&gt;

Database authDB = DatabaseFactory.CreateDatabase(&amp;#8220;Authentication&amp;#8221;);

DBCommandWrapper dbCommandWrapper =
authDB.GetStoredProcCommandWrapper(&amp;#8220;usp\_LookupUserbyLoginID&amp;#8221;);

dbCommandWrapper.AddInParameter(&amp;#8220;@kerbID&amp;#8221;, System.Data.DbType.String,
requestUserID);

IDataReader reader = authDB.ExecuteReader(dbCommandWrapper);

&lt;span class="cb1"&gt;bool&lt;/span&gt; records = &lt;span class="cb1"&gt;false&lt;/span&gt;;

&lt;/div&gt;

&lt;p&gt;But get an error like this: &lt;font size="+0"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;em&gt;Security&amp;nbsp;Exception&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif "&gt;&lt;strong&gt;Description:&lt;/strong&gt;
The application attempted to perform an operation not allowed by the
security policy. To grant this application the required permission
please contact your system administrator or change the application&amp;#8217;s
trust level in the configuration&amp;nbsp;file.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exception Details:&lt;/strong&gt; System.Security.SecurityException: Requested
registry access is not&amp;nbsp;allowed.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source&amp;nbsp;Error:&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;+
|     Line 157:    DBCommandWrapper dbCommandWrapper = authDB.GetStoredPro |
| cCommandWrapper(&amp;#8220;usp_LookupUserbyLoginID&amp;#8221;);                              |
|                                                                          |
|     Line 158:    dbCommandWrapper.AddInParameter(&amp;#8220;@kerbID&amp;#8221;, System.Data. |
| DbType.String, requestUserID);                                           |
|                                                                          |
|     Line 159:    IDataReader reader = authDB.ExecuteReader(dbCommandWrap |
| per);                                                                    |
|                                                                          |
|     Line 160:    bool records = false;                                   |
|                                                                          |
|     Line 161:                                                            |
|                                                                          |
| &lt;/code&gt;                                                                  |&amp;nbsp;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;+&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font face="Verdana"&gt;Source File:
&lt;/font&gt;&lt;/strong&gt;&amp;#92;Webdevel.caes.ucdavis.edu\wwwroot\$\EligibilityList\AuthenticationModule.cs&lt;strong&gt;&lt;font face="Verdana"&gt;
   Line: &lt;/font&gt;&lt;/strong&gt;159  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font face="Verdana"&gt;Stack Trace:&lt;/font&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;+
|     [SecurityException: Requested registry access is not allowed.]       |
|                                                                          |
|        Microsoft.Win32.RegistryKey.OpenSubKey(String name, Boolean writa |
| ble) +473                                                                |
|                                                                          |
|        System.Diagnostics.EventLog.CreateEventSource(String source, Stri |
| ng logName, String machineName, Boolean useMutex) +443                   |
|                                                                          |
|        System.Diagnostics.EventLog.WriteEntry(String message, EventLogEn |
| tryType type, Int32 eventID, Int16 category, Byte[] rawData) +347        |
|                                                                          |
|        System.Diagnostics.EventLog.WriteEntry(String message, EventLogEn |
| tryType type, Int32 eventID, Int16 category) +21                         |
|                                                                          |
|        System.Diagnostics.EventLog.WriteEntry(String message, EventLogEn |
| tryType type, Int32 eventID) +15                                         |
|                                                                          |
|        Microsoft.Practices.EnterpriseLibrary.Common.Instrumentation.Even |
| tLogger.Log(String message)                                              |
|                                                                          |
| &lt;/code&gt;                                                                  |&amp;nbsp;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;+&lt;/p&gt;
&lt;p&gt;&lt;/font&gt;&lt;/i&gt;&lt;span style="FONT-FAMILY: Arial,Helvetica,Geneva,SunSans-Regular,sans-serif;"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;font size="+0"&gt;&lt;!--StartFragment --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/h2&gt;
&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/font&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;If
you look at the Stack Trace, you can see the problem is with the
CreateEventSource() call. Even though you haven’t specified using the
Enterprise Library Logging Block, secretly it is still using
System.Diagnostics.EventLog as part of its setup.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Here’s an article which describes the
problem:&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;&lt;a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;329291"&gt;&lt;span class="caps"&gt;PRB&lt;/span&gt;: “Requested Registry Access Is
Not Allowed” Error Message When &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Application Tries to Write New
EventSource in the
EventLog&lt;/a&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Unfortunately, the solutions don’t
work. Solution #1, manually entering a registry key, didn’t work for
me. Solution #2, writing some code which calls CreateEventSource() also
doesn’t &lt;em&gt;quite&lt;/em&gt; work either.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;I say &lt;em&gt;quite&lt;/em&gt; because the issue is
that CreateEventSource() needs to be called by a user with
Administrative Rights. So what I did was create a project using my
ErrorHandler class (from &lt;a href="http://acgetchell.blogspot.com/2005/02/fun-with-microsofts-enterprise-library.html"&gt;Fun with Microsoft’s Enterprise
Library&lt;/a&gt;),
setup the project to run in App Pool #1 which runs using the &lt;span class="caps"&gt;ASPNET&lt;/span&gt;
account, grant that account Admin rights, do iisreset &amp;amp;&amp;amp; gpupdate
/force, open the project’s default web form thereby causing an event to
be written which calls the ErrorHandler class which calls
CreateEventSource(), and then go back and revoke admin rights on
&lt;span class="caps"&gt;ASPNET&lt;/span&gt;.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Unfortunately, this needs to be done
for every application which will call CreateEventSource() — unless you
want to leave &lt;span class="caps"&gt;ASPNET&lt;/span&gt; running as Administrator (&lt;strong&gt;very bad
idea!&lt;/strong&gt;).&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Inelegant, but it works. I’ve notified
Microsoft &lt;span class="caps"&gt;KB&lt;/span&gt; site of my findings; perhaps they’ll revise the article, or
show something more elegant.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Update: &lt;font face="Arial" size="2"&gt;This is also discussed in the
&lt;a href="http://www.gotdotnet.com/workspaces/customization/uploadedhtmlpage.aspx?FileID=ded67339-a081-489a-8d63-817323f31104&amp;amp;id=295a464a-6072-4e25-94e2-91be63527327"&gt;Enterprise Library
&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt;.
However, the solutions given there are 1) run the “Install Services”
script (why would you install Visual Studio on a server?) 2) use
installutil on the &lt;span class="caps"&gt;EL&lt;/span&gt; assemblies (perhaps that will work — I’ll have to
try it) or 3) remove all logging from the &lt;span class="caps"&gt;EL&lt;/span&gt; (which in my case I
want).&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Okay, we’ve got that problem taken
care of. We write our &lt;span class="caps"&gt;EL&lt;/span&gt; application and breathlessly open the default
page, only to find:&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;&lt;!--StartFragment --&gt;&lt;font face="Times New Roman" size="3"&gt; Server
Error in &amp;#8216;/EligibilityList&amp;#8217;&amp;nbsp;Application.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;File or assembly name ko20f8cc.dll, or one of its dependencies, was not
found.&lt;br /&gt;
Description: An unhandled exception occurred during the execution of the
current web request. Please review the stack trace for more information
about the error and where it originated in the&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;Exception Details: System.&lt;span class="caps"&gt;IO&lt;/span&gt;.FileNotFoundException: File or assembly
name ko20f8cc.dll, or one of its dependencies, was not&amp;nbsp;found.  &lt;/p&gt;
&lt;p&gt;Source&amp;nbsp;Error:  &lt;/p&gt;
&lt;p&gt;Line 119:      private bool Authorize(string requestUserID)&lt;br /&gt;
Line 120:      {&lt;br /&gt;
Line 121:         Database authDB =
DatabaseFactory.CreateDatabase(&amp;#8220;Authentication&amp;#8221;);&lt;br /&gt;
Line 122://         IDataReader dataReader;&lt;br /&gt;
Line 123:         DBCommandWrapper dbCommandWrapper =
authDB.GetStoredProcCommandWrapper(&amp;#8220;usp_LookupUserbyLoginID&amp;#8221;, new
SqlParameter(&amp;#8220;@kerbID&amp;#8221;, requestUserID)); &lt;/font&gt;&lt;br /&gt;
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;This was discussed in the
&lt;a href="http://www.gotdotnet.com/workspaces/messageboard/thread.aspx?id=295a464a-6072-4e25-94e2-91be63527327&amp;amp;threadid=ee840b95-2fb0-49c9-b888-26abd8268b98"&gt;GotDotNet&lt;/a&gt;
forums. The problem is this:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;&lt;a href="http://support.microsoft.com/default.aspx?scid=317012"&gt;Process and request identity in
&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;&lt;/a&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Behind the scenes the &lt;span class="caps"&gt;DAAB&lt;/span&gt; calls
XmlSerializer, which want to write a temporary assembly to run. &lt;span class="caps"&gt;ASPNET&lt;/span&gt;
(or the account you’re running under) doesn’t have access to the default
temp directory, C:\Windows\temp, so the assembly can’t be written and
the &lt;span class="caps"&gt;DAAB&lt;/span&gt; halts. Nice.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;To fix this, give the account the
Application Pool runs under &lt;strong&gt;Full&lt;/strong&gt; (that’s right, it needs to create
subdirectories) permissions to C:\Windows\temp.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;By the way, this use of XmlSerializer has
&lt;a href="http://www.gotdotnet.com/workspaces/messageboard/thread.aspx?id=295a464a-6072-4e25-94e2-91be63527327&amp;amp;threadid=528cc244-f686-458f-b837-c5e319995087"&gt;performance
implications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Finally, Enterprise Library is
installed, our code references it correctly, temporary assemblies can be
written locally, life is good.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;Then we install Windows Server 2003
Service Pack 1.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;font face="Arial"&gt;And instantly, our web pages return
the very lonely:&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="2"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;font face="Arial"&gt;Service Unavailable&lt;/font&gt;&lt;/h1&gt;
&lt;p&gt;&lt;font face="Arial"&gt;Looking at &lt;span class="caps"&gt;IIS&lt;/span&gt; Manager, you can see that the
Application Pool has been disabled. Looking in the System Log from Event
Viewer shows this:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial"&gt;A failure was encountered while launching the process
serving application pool &amp;#8216;AppPool #1&amp;#8217;. The application pool has been
disabled.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial"&gt;For more information, see Help and Support Center at
&lt;/font&gt;&lt;a href="http://go.microsoft.com/fwlink/events.asp"&gt;&lt;font face="Arial"&gt;http://go.microsoft.com/fwlink/events.asp&lt;/font&gt;&lt;/a&gt;&lt;font face="Arial"&gt;.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Of course that link leads to no further
information.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;To cut to the chase, the problem is that
Windows Server 2003 &lt;span class="caps"&gt;SP1&lt;/span&gt; has revoked rights/permissions on the &lt;span class="caps"&gt;ASPNET&lt;/span&gt;
account, that cannot be restored even by placing it in the
Administrators group. The way to fix the problem is:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Go to the .&lt;span class="caps"&gt;NET&lt;/span&gt; Framework Folder (typically
c:\Windows\Microsoft.&lt;span class="caps"&gt;NET&lt;/span&gt;\Framework\v1.1.4322)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;aspnet_regiis -ua to uninstall the
framework&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;aspnet_regiis -i to reinstall the
framework&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;In &lt;span class="caps"&gt;IIS&lt;/span&gt; Manager:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Enable &lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; pages&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;In User manager (compmgmt.msc)&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Set the &lt;span class="caps"&gt;ASPNET&lt;/span&gt; account with the password on
the &lt;span class="caps"&gt;SQL&lt;/span&gt; server, and as a member of IIS_WPG&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;In &lt;span class="caps"&gt;IIS&lt;/span&gt; Manager:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Set the Application pool to run under the
account with the password entered from the previous step&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;At the Run command:&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;iisreset to reset &lt;span class="caps"&gt;IIS&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;gpupdate /force to ensure password
synchronization&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font face="Arial" size="4"&gt;Wasn’t that fun?&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;font face="Arial" size="2"&gt;Thank goodness Whidbey and Enterprise
Library v2.0 aren’t coming out until September.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;/font&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;
&lt;/p&gt;</summary><category term=".net"></category></entry><entry><title>Using Enterprise Library Logging</title><link href="http://adamgetchell.org/using-enterprise-library-logging.html" rel="alternate"></link><updated>2007-09-22T23:40:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:using-enterprise-library-logging.html</id><summary type="html">&lt;p&gt;To get logging working without pesky &lt;span class="caps"&gt;WMI&lt;/span&gt;/Performance counter errors on
&lt;span style="font-style: italic;"&gt;every&lt;/span&gt; logged&amp;nbsp;event:  &lt;/p&gt;
&lt;p&gt;Per &lt;a href="http://weblogs.asp.net/tomholl/archive/2005/02/18/376187.aspx#FeedBack"&gt;Tom Hollander&amp;#8217;s&amp;nbsp;weblog&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Go to the Logging project, Project Properties dialog for the Common
project, and under Configuration Properties\Build, find the Conditional
Compilation Properties property and remove ;&lt;span class="caps"&gt;USEWMI&lt;/span&gt;;&lt;span class="caps"&gt;USEPERFORMANCECOUNTER&lt;/span&gt;
for the build type you&amp;#8217;re interested in (ReleaseFinal, in this&amp;nbsp;case).  &lt;/p&gt;
&lt;p&gt;Ignore compile warnings about &lt;span class="caps"&gt;DB2&lt;/span&gt;&amp;nbsp;goop.  &lt;/p&gt;
&lt;p&gt;Delete any old project references and re-add reference to new version in
C:\Program Files\Microsoft Enterprise&amp;nbsp;Library\src\Logging\bin\ReleaseFinal.  &lt;/p&gt;
&lt;p&gt;Then add an appropriate using statement and use in&amp;nbsp;code:  &lt;/p&gt;
&lt;div class="cf"&gt;

&lt;span class="cb1"&gt;using&lt;/span&gt; System;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Collections;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.ComponentModel;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Data;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Drawing;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web.SessionState;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web.&lt;span class="caps"&gt;UI&lt;/span&gt;;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web.&lt;span class="caps"&gt;UI&lt;/span&gt;.WebControls;

&lt;span class="cb1"&gt;using&lt;/span&gt; System.Web.&lt;span class="caps"&gt;UI&lt;/span&gt;.HtmlControls;

&lt;span class="cb1"&gt;using&lt;/span&gt;
Microsoft.Practices.EnterpriseLibrary.Logging;

&lt;span class="cb1"&gt;using&lt;/span&gt;
Microsoft.Practices.EnterpriseLibrary.Logging.Tracing;

 

&lt;span class="cb1"&gt;namespace&lt;/span&gt; &lt;span class="caps"&gt;CAESDO&lt;/span&gt;

{

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Summary description
for WebForm1.&lt;/span&gt;

    &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

    &lt;span class="cb1"&gt;public&lt;/span&gt; &lt;span class="cb1"&gt;class&lt;/span&gt;
DefaultPage : System.Web.&lt;span class="caps"&gt;UI&lt;/span&gt;.Page

    {

        &lt;span class="cb1"&gt;private&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
Page\_Load(&lt;span class="cb1"&gt;object&lt;/span&gt; sender, System.EventArgs e)

        {

            &lt;span class="cb3"&gt;// Put user code to initialize the page
here&lt;/span&gt;

            LogEntry logEntry = &lt;span class="cb1"&gt;new&lt;/span&gt; LogEntry();

            logEntry.Message = &amp;#8220;Starting up the application&amp;#8221;;

            Logger.Write(logEntry);

 

            &lt;span class="cb3"&gt;// Now this is cool! Tracing flow of code
through application&lt;/span&gt;

            &lt;span class="cb3"&gt;// and it was simple to add an EmailAlert
with an EmailSink&lt;/span&gt;

 

            &lt;span class="cb1"&gt;using&lt;/span&gt; (&lt;span class="cb1"&gt;new&lt;/span&gt;
Tracer(&amp;#8220;Trace&amp;#8221;))

            {

                Logger.Write(&amp;#8220;Hello world&amp;#8221;);

                Logger.Write(&amp;#8220;Hello by e-mail&amp;#8221;,
&amp;#8220;EmailAlerts&amp;#8221;,5,3000,Microsoft.Practices.EnterpriseLibrary.Logging.Severity.Information,
&amp;#8220;An e-mail message logging all kinds of stuff&amp;#8221;);

            }

 

        }

 

&lt;span class="cb1"&gt;        \#region&lt;/span&gt; Web Form Designer generated
code

        &lt;span class="cb1"&gt;override&lt;/span&gt; &lt;span
class="cb1"&gt;protected&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
OnInit(EventArgs e)

        {

            &lt;span class="cb3"&gt;//&lt;/span&gt;

            &lt;span class="cb3"&gt;// &lt;span class="caps"&gt;CODEGEN&lt;/span&gt;: This call is required by the
&lt;span class="caps"&gt;ASP&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt; Web Form Designer.&lt;/span&gt;

            &lt;span class="cb3"&gt;//&lt;/span&gt;

            InitializeComponent();

            &lt;span class="cb1"&gt;base&lt;/span&gt;.OnInit(e);

        }

 

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;summary\&gt;&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; Required method
for Designer support - do not modify&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt; the contents of
this method with the code editor.&lt;/span&gt;

        &lt;span class="cb2"&gt;///&lt;/span&gt;&lt;span class="cb3"&gt;&lt;/span&gt;&lt;span
class="cb2"&gt;\&lt;/summary\&gt;&lt;/span&gt;

        &lt;span class="cb1"&gt;private&lt;/span&gt; &lt;span class="cb1"&gt;void&lt;/span&gt;
InitializeComponent()

        {   

            &lt;span class="cb1"&gt;this&lt;/span&gt;.Load += &lt;span
class="cb1"&gt;new&lt;/span&gt; System.EventHandler(&lt;span
class="cb1"&gt;this&lt;/span&gt;.Page\_Load);

        }

&lt;span class="cb1"&gt;        \#endregion&lt;/span&gt;

    }

}

&lt;/div&gt;

&lt;p&gt;&lt;span style="font-style: italic;"&gt;Voila!&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;d sure make it easier to post code to my weblog if VisualStudio 2005
included
&lt;a href="http://www.jtleigh.com/people/colin/software/CopySourceAsHtml/"&gt;CopySourceAsHtml&lt;/a&gt;
functionality. This is a great application, too bad it doesn&amp;#8217;t work for
me. I seem to have uncovered the first interaction between &lt;span class="caps"&gt;CSAH&lt;/span&gt; and a
trial VisualPerl installation that won&amp;#8217;t&amp;nbsp;uninstall.  &lt;/p&gt;
&lt;p&gt;Par for the&amp;nbsp;course.  &lt;/p&gt;
&lt;p&gt;Although, I&amp;#8217;ve suggested to the Visual Studio 2005 guys that they add
this&amp;nbsp;feature.  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;P.S.&lt;/span&gt; Collin worked to fix &lt;span class="caps"&gt;CSAH&lt;/span&gt;, and I nuked and reinstalled my system,
including Visual Studio 2003.&lt;span class="caps"&gt;NET&lt;/span&gt;. That seems to have done the&amp;nbsp;trick.&lt;/p&gt;
&lt;/p&gt;</summary><category term=".net"></category></entry><entry><title>Signing and Installing the EnterpriseLibrary in the GAC</title><link href="http://adamgetchell.org/signing-and-installing.html" rel="alternate"></link><updated>2007-09-22T23:39:00-07:00</updated><author><name>Adam Getchell</name></author><id>tag:adamgetchell.org,2007-09-22:signing-and-installing.html</id><summary type="html">&lt;p&gt;If you want to know how to do this, the gory details are
&lt;a href="http://practices.gotdotnet.com/messageboard/thread.aspx?id=295a464a-6072-4e25-94e2-91be63527327&amp;amp;mbid=12e6b3c0-1261-461b-b86d-eff86af3939d&amp;amp;threadid=cd6a5007-bccd-4802-83a4-b4940d72088c"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term=".net"></category></entry></feed>